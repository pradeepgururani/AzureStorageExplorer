<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WindowsAzure.StorageExtensions</name>
    </assembly>
    <members>
        <member name="T:System.Threading.Tasks.TaskHelpers">
            <summary>
            Helpers for safely using Task libraries. 
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Canceled">
            <summary>
            Returns a canceled Task. The task is completed, IsCanceled = True, IsFaulted = False.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Canceled``1">
            <summary>
            Returns a canceled Task of the given type. The task is completed, IsCanceled = True, IsFaulted = False.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Completed">
            <summary>
            Returns a completed task that has no result. 
            </summary>        
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromError(System.Exception)">
            <summary>
            Returns an error task. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromError``1(System.Exception)">
            <summary>
            Returns an error task of the given type. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromErrors(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Returns an error task of the given type. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromErrors``1(System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            Returns an error task of the given type. The task is Completed, IsCanceled = False, IsFaulted = True
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.FromResult``1(``0)">
            <summary>
            Returns a successful completed task with the given result.  
            </summary>        
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.Iterate(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Return a task that runs all the tasks inside the iterator sequentially. It stops as soon
            as one of the tasks fails or cancels, or after all the tasks have run succesfully.
            </summary>
            <param name="asyncIterator">collection of tasks to wait on</param>
            <param name="cancellationToken">cancellation token</param>
            <param name="disposeEnumerator">whether or not to dispose the enumerator we get from <paramref name="asyncIterator"/>.
            Only set to <c>false</c> if you can guarantee that <paramref name="asyncIterator"/>'s enumerator does not have any resources it needs to dispose.</param>
            <returns>a task that signals completed when all the incoming tasks are finished.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.IterateImpl(System.Collections.Generic.IEnumerator{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Provides the implementation of the Iterate method.
            Contains special logic to help speed up common cases.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.IterateImplIncompleteTask(System.Collections.Generic.IEnumerator{System.Threading.Tasks.Task},System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <summary>
            Fallback for IterateImpl when the antecedent Task isn't yet complete.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.RunSynchronously(System.Action,System.Threading.CancellationToken)">
            <summary>
            Replacement for Task.Factory.StartNew when the code can run synchronously. 
            We run the code immediately and avoid the thread switch. 
            This is used to help synchronous code implement task interfaces.
            </summary>
            <param name="action">action to run synchronouslyt</param>
            <param name="token">cancellation token. This is only checked before we run the task, and if cancelled, we immediately return a cancelled task.</param>
            <returns>a task who result is the result from Func()</returns>
            <remarks>
            Avoid calling Task.Factory.StartNew.         
            This avoids gotchas with StartNew:
            - ensures cancellation token is checked (StartNew doesn't check cancellation tokens).
            - Keeps on the same thread. 
            - Avoids switching synchronization contexts.
            Also take in a lambda so that we can wrap in a try catch and honor task failure semantics.        
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.RunSynchronously``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Replacement for Task.Factory.StartNew when the code can run synchronously. 
            We run the code immediately and avoid the thread switch. 
            This is used to help synchronous code implement task interfaces.
            </summary>
            <typeparam name="TResult">type of result that task will return.</typeparam>
            <param name="func">function to run synchronously and produce result</param>
            <param name="cancellationToken">cancellation token. This is only checked before we run the task, and if cancelled, we immediately return a cancelled task.</param>
            <returns>a task who result is the result from Func()</returns>
            <remarks>
            Avoid calling Task.Factory.StartNew.         
            This avoids gotchas with StartNew:
            - ensures cancellation token is checked (StartNew doesn't check cancellation tokens).
            - Keeps on the same thread. 
            - Avoids switching synchronization contexts.
            Also take in a lambda so that we can wrap in a try catch and honor task failure semantics.        
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.RunSynchronously``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Overload of RunSynchronously that avoids a call to Unwrap(). 
            This overload is useful when func() starts doing some synchronous work and then hits IO and 
            needs to create a task to finish the work. 
            </summary>
            <typeparam name="TResult">type of result that Task will return</typeparam>
            <param name="func">function that returns a task</param>
            <param name="cancellationToken">cancellation token. This is only checked before we run the task, and if cancelled, we immediately return a cancelled task.</param>
            <returns>a task, created by running func().</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.SetIfTaskFailed``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task)">
            <summary>
            Update the completion source if the task failed (cancelled or faulted). No change to completion source if the task succeeded. 
            </summary>
            <typeparam name="TResult">result type of completion source</typeparam>
            <param name="tcs">completion source to update</param>
            <param name="source">task to update from.</param>
            <returns>true on success</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{``0},System.Threading.Tasks.Task)">
            <summary>
            Set a completion source from the given Task.
            </summary>
            <typeparam name="TResult">result type for completion source.</typeparam>
            <param name="tcs">completion source to set</param>
            <param name="source">Task to get values from.</param>
            <returns>true if this successfully sets the completion source.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpers.TrySetFromTask``1(System.Threading.Tasks.TaskCompletionSource{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.Task)">
            <summary>
            Set a completion source from the given Task. If the task ran to completion and the result type doesn't match
            the type of the completion source, then a default value will be used. This is useful for converting Task into
            Task{AsyncVoid}, but it can also accidentally be used to introduce data loss (by passing the wrong
            task type), so please execute this method with care.
            </summary>
            <typeparam name="TResult">result type for completion source.</typeparam>
            <param name="tcs">completion source to set</param>
            <param name="source">Task to get values from.</param>
            <returns>true if this successfully sets the completion source.</returns>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpers.AsyncVoid">
            <summary>
            Used as the T in a "conversion" of a Task into a Task{T}
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpers.CancelCache`1">
            <summary>
            This class is a convenient cache for per-type cancelled tasks
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Catch(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.CatchInfo,System.Threading.Tasks.CatchInfoBase{System.Threading.Tasks.Task}.CatchResult},System.Threading.CancellationToken)">
            <summary>
            Calls the given continuation, after the given task completes, if it ends in a faulted state.
            Will not be called if the task did not fault (meaning, it will not be called if the task ran
            to completion or was canceled). Intended to roughly emulate C# 5's support for "try/catch" in
            async methods. Note that this method allows you to return a Task, so that you can either return
            a completed Task (indicating that you swallowed the exception) or a faulted task (indicating that
            that the exception should be propagated). In C#, you cannot normally use await within a catch
            block, so returning a real async task should never be done from Catch().
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Catch``1(System.Threading.Tasks.Task{``0},System.Func{System.Threading.Tasks.CatchInfo{``0},System.Threading.Tasks.CatchInfoBase{System.Threading.Tasks.Task{``0}}.CatchResult},System.Threading.CancellationToken)">
            <summary>
            Calls the given continuation, after the given task completes, if it ends in a faulted state.
            Will not be called if the task did not fault (meaning, it will not be called if the task ran
            to completion or was canceled). Intended to roughly emulate C# 5's support for "try/catch" in
            async methods. Note that this method allows you to return a Task, so that you can either return
            a completed Task (indicating that you swallowed the exception) or a faulted task (indicating that
            that the exception should be propagated). In C#, you cannot normally use await within a catch
            block, so returning a real async task should never be done from Catch().
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CopyResultToCompletionSource``1(System.Threading.Tasks.Task,System.Threading.Tasks.TaskCompletionSource{``0},``0)">
            <summary>
            Upon completion of the task, copies its result into the given task completion source, regardless of the
            completion state. This causes the original task to be fully observed, and the task that is returned by
            this method will always successfully run to completion, regardless of the original task state.
            Since this method consumes a task with no return value, you must provide the return value to be used
            when the inner task ran to successful completion.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CopyResultToCompletionSource``1(System.Threading.Tasks.Task{``0},System.Threading.Tasks.TaskCompletionSource{``0})">
            <summary>
            Upon completion of the task, copies its result into the given task completion source, regardless of the
            completion state. This causes the original task to be fully observed, and the task that is returned by
            this method will always successfully run to completion, regardless of the original task state.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CastToobject(System.Threading.Tasks.Task)">
            <summary>
            Cast Task to Task of object
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CastToobject``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Cast Task of T to Task of object
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.CastFromobject``1(System.Threading.Tasks.Task{System.Object})">
            <summary>
            Cast Task of object to Task of T
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.FastUnwrap(System.Threading.Tasks.Task{System.Threading.Tasks.Task})">
            <summary>
            A version of task.Unwrap that is optimized to prevent unnecessarily capturing the
            execution context when the antecedent task is already completed.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.FastUnwrap``1(System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}})">
            <summary>
            A version of task.Unwrap that is optimized to prevent unnecessarily capturing the
            execution context when the antecedent task is already completed.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Finally(System.Threading.Tasks.Task,System.Action,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, regardless of the state
            the task ended in. Intended to roughly emulate C# 5's support for "finally" in async methods.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Finally``1(System.Threading.Tasks.Task{``0},System.Action,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, regardless of the state
            the task ended in. Intended to roughly emulate C# 5's support for "finally" in async methods.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.MarkExceptionsObserved(System.Threading.Tasks.Task)">
            <summary>
            Marks a Task as "exception observed". The Task is required to have been completed first.
            </summary>
            <remarks>
            Useful for 'finally' clauses, as if the 'finally' action throws we'll propagate the new
            exception and lose track of the inner exception.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then(System.Threading.Tasks.Task,System.Action,System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``1(System.Threading.Tasks.Task,System.Func{``0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``1(System.Threading.Tasks.Task,System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``1(System.Threading.Tasks.Task{``0},System.Action{``0},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault). The continuation is provided with the
            result of the task as its sole parameter.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault). The continuation is provided with the
            result of the task as its sole parameter.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault). The continuation is provided with the
            result of the task as its sole parameter.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.Then``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Threading.CancellationToken,System.Boolean)">
            <summary>
            Calls the given continuation, after the given task has completed, if the task successfully ran
            to completion (i.e., was not cancelled and did not fault). The continuation is provided with the
            result of the task as its sole parameter.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.ThrowIfFaulted(System.Threading.Tasks.Task)">
            <summary>
            Throws the first faulting exception for a task which is faulted. It attempts to preserve the original
            stack trace when throwing the exception (which should always work in 4.5, and should also work in 4.0
            when running in full trust). Note: It is the caller's responsibility not to pass incomplete tasks to
            this method, because it does degenerate into a call to the equivalent of .Wait() on the task when it
            hasn't yet completed.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.ToAsyncVoidTask(System.Action)">
            <summary>
            Adapts any action into a Task (returning AsyncVoid, so that it's usable with Task{T} extension methods).
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.ToTask``1(System.Threading.Tasks.Task,System.Threading.CancellationToken,``0)">
            <summary>
            Changes the return value of a task to the given result, if the task ends in the RanToCompletion state.
            This potentially imposes an extra ContinueWith to convert a non-completed task, so use this with caution.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskHelpersExtensions.TryGetResult``1(System.Threading.Tasks.Task{``0},``0@)">
            <summary>
            Attempts to get the result value for the given task. If the task ran to completion, then
            it will return true and set the result value; otherwise, it will return false.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.TaskHelpersExtensions.AsyncVoid">
            <summary>
            Used as the T in a "conversion" of a Task into a Task{T}
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfoBase`1.Throw">
            <summary>
            Returns a CatchResult that re-throws the original exception.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.CatchInfoBase`1.Exception">
            <summary>
            The exception that was thrown to cause the Catch block to execute.
            </summary>
        </member>
        <member name="T:System.Threading.Tasks.CatchInfoBase`1.CatchResult">
            <summary>
            Represents a result to be returned from a Catch handler.
            </summary>
        </member>
        <member name="P:System.Threading.Tasks.CatchInfoBase`1.CatchResult.Task">
            <summary>
            Gets or sets the task to be returned to the caller.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo.Handled">
            <summary>
            Returns a CatchResult that returns a completed (non-faulted) task.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo.Task(System.Threading.Tasks.Task)">
            <summary>
            Returns a CatchResult that executes the given task and returns it, in whatever state it finishes.
            </summary>
            <param name="task">The task to return.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo.Throw(System.Exception)">
            <summary>
            Returns a CatchResult that throws the given exception.
            </summary>
            <param name="ex">The exception to throw.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo`1.Handled(`0)">
            <summary>
            Returns a CatchResult that returns a completed (non-faulted) task.
            </summary>
            <param name="returnValue">The return value of the task.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo`1.Task(System.Threading.Tasks.Task{`0})">
            <summary>
            Returns a CatchResult that executes the given task and returns it, in whatever state it finishes.
            </summary>
            <param name="task">The task to return.</param>
        </member>
        <member name="M:System.Threading.Tasks.CatchInfo`1.Throw(System.Exception)">
            <summary>
            Returns a CatchResult that throws the given exception.
            </summary>
            <param name="ex">The exception to throw.</param>
        </member>
        <member name="T:WindowsAzure.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.EntityTypeDataMissingKey">
            <summary>
              Looks up a localized string similar to PartitionKey or RowKey attribute should be defined for type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.EntityTypeDataShouldBeOneAttribute">
            <summary>
              Looks up a localized string similar to Member &apos;{0}&apos; in type &apos;{1}&apos; should be marked only by one metadata attribute..
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.ExpressionEvaluatorInvalidCast">
            <summary>
              Looks up a localized string similar to Unable to cast type &apos;{0}&apos; to target type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.ExpressionEvaluatorTypeNotSupported">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not supported..
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.ExpressionEvaluatorUnableToEvaluate">
            <summary>
              Looks up a localized string similar to Unable to get value of the node: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.ExpressionValueAccessorInvalidMemberType">
            <summary>
              Looks up a localized string similar to Invalid entity member type: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.PropertyETagInvalidType">
            <summary>
              Looks up a localized string similar to ETag must have a string type..
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.PropertyPartitionKeyInvalidType">
            <summary>
              Looks up a localized string similar to PartitionKey must have a string type..
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.PropertyRowKeyInvalidType">
            <summary>
              Looks up a localized string similar to RowKey must have a string type..
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.PropertyTimestampInvalidType">
            <summary>
              Looks up a localized string similar to Timestamp should be a DateTime type..
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.SerializationExtensionsNotSupportedType">
            <summary>
              Looks up a localized string similar to Unable to serialize type: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.TableBatchPartitionerNoEntities">
            <summary>
              Looks up a localized string similar to Empty entities collection..
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.TableRequestExecutorInvalidMode">
            <summary>
              Looks up a localized string similar to Invalid request execution mode &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.TranslatorMemberNotSupported">
            <summary>
              Looks up a localized string similar to Member &apos;{0}&apos; does not supported..
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.TranslatorMethodInvalidArgument">
            <summary>
              Looks up a localized string similar to Invalid method &apos;{0}&apos; arguments..
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.TranslatorMethodNotSupported">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; does not supported..
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.TranslatorOperatorNotSupported">
            <summary>
              Looks up a localized string similar to Operator &apos;{0}&apos; does not supported..
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.TranslatorUnableToEvaluateExpression">
            <summary>
              Looks up a localized string similar to Unable to evaluate an expression: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.TranslatorUnableToTranslateMethod">
            <summary>
              Looks up a localized string similar to Unable to translate method: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:WindowsAzure.Properties.Resources.ValueAccessorFactoryNotSupportedType">
            <summary>
              Looks up a localized string similar to Member type &apos;{0}&apos; does not supported..
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.Attributes.IgnoreAttribute">
            <summary>
                Defines whether property should not be serialized.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.Attributes.ETagAttribute">
            <summary>
                Defines whether property should keep an etag value.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.Attributes.PropertyAttribute">
            <summary>
                Defines a custom property name.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.Attributes.PropertyAttribute.#ctor(System.String)">
            <summary>
                Constructor.
            </summary>
            <param name="name">Custom property name.</param>
        </member>
        <member name="P:WindowsAzure.Table.Attributes.PropertyAttribute.Name">
            <summary>
                Gets a custom property name.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap">
            <summary>
                Maps an entity type data.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap.RegisterAssembly(System.Reflection.Assembly[])">
            <summary>
                Performs registration of assemblies with type maps.
            </summary>
            <param name="assemblies">List of assemblies.</param>
        </member>
        <member name="T:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap`1">
            <summary>
                Maps an entity type data.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
        </member>
        <member name="T:WindowsAzure.Table.EntityConverters.TypeData.IEntityTypeData`1">
            <summary>
                Defines base interface for an entity type data converter.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.IEntityTypeData`1.GetEntity(Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity)">
            <summary>
                Converts DynamicTableEntity into POCO entity.
            </summary>
            <param name="tableEntity">Table entity.</param>
            <returns>POCO entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.IEntityTypeData`1.GetEntity(`0)">
            <summary>
                Converts POCO entity into ITableEntity.
            </summary>
            <param name="entity">POCO entity.</param>
            <returns>Table entity.</returns>
        </member>
        <member name="P:WindowsAzure.Table.EntityConverters.TypeData.IEntityTypeData`1.NameChanges">
            <summary>
                Gets an entity members name changes.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap`1.#ctor">
            <summary>
                Constructor.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap`1.#ctor(System.Action{WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap{`0}})">
            <summary>
                Constructor.
            </summary>
            <param name="classMapInitializer">The class map initializer.</param>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap`1.GetEntity(Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity)">
            <summary>
                Converts <see cref="T:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity" /> into POCO.
            </summary>
            <param name="tableEntity">Table entity.</param>
            <returns>POCO.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap`1.GetEntity(`0)">
            <summary>
                Converts POCO into <see cref="T:Microsoft.WindowsAzure.Storage.Table.ITableEntity" />.
            </summary>
            <param name="entity">POCO entity.</param>
            <returns>Table entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap`1.PropertyName``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Maps a property and overrides the property name.
            </summary>
            <typeparam name="TMember">Entity member.</typeparam>
            <param name="propertyName">Property name.</param>
            <param name="propertyLambda">Property lambda expression.</param>
            <returns>Current instance of <see cref="T:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap" />.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Ignores a property map.
            </summary>
            <typeparam name="TMember">Entity member.</typeparam>
            <param name="propertyLambda">Property lambda expression.</param>
            <returns>Current instance of <see cref="T:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap" />.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap`1.RowKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Maps a row key property.
            </summary>
            <typeparam name="TMember">Entity member.</typeparam>
            <param name="propertyLambda">Property lambda expression.</param>
            <returns>Current instance of <see cref="T:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap" />.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap`1.PartitionKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Maps a partition key property.
            </summary>
            <typeparam name="TMember">Entity member.</typeparam>
            <param name="propertyLambda">Property lambda expression.</param>
            <returns>Current instance of <see cref="T:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap" />.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap`1.ETag``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Maps a etag property.
            </summary>
            <typeparam name="TMember">Entity member.</typeparam>
            <param name="propertyLambda">Property lambda expression.</param>
            <returns>Current instance of <see cref="T:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap" />.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap`1.Timestamp``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Maps a timestamp property.
            </summary>
            <typeparam name="TMember">Entity member.</typeparam>
            <param name="propertyLambda">Property lambda expression.</param>
            <returns>Current instance of <see cref="T:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap" />.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap`1.GetMemberInfoFromLambda``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
                Converts a member expression to a member metadata instance.
            </summary>
            <param name="memberLambda">Lambda expression for a class member.</param>
            <returns>Member metadata.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap`1.FindPropertyImplementation(System.Reflection.PropertyInfo,System.Type)">
            <summary>
                Finds the property implementation on the type.
            </summary>
            <param name="interfacePropertyInfo">Property metadata instance.</param>
            <param name="actualType">Class type</param>
            <returns>Property metadata instance.</returns>
        </member>
        <member name="P:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeMap`1.NameChanges">
            <summary>
                Gets a name changes for entity members.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.Queryable.Expressions.Methods.IMethodTranslator">
            <summary>
                Expression method translator.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.Methods.IMethodTranslator.Translate(System.Linq.Expressions.MethodCallExpression,WindowsAzure.Table.Queryable.Expressions.ITranslationResult)">
            <summary>
                Provides evaluated query information.
            </summary>
            <param name="method">Expression method.</param>
            <param name="result">Translation result.</param>
        </member>
        <member name="P:WindowsAzure.Table.Queryable.Expressions.Methods.IMethodTranslator.Name">
            <summary>
                Gets a method name.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.Queryable.Expressions.Methods.SingleOrDefaultTranslator">
            <summary>
                LINQ SingleOrDefault method translator.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.Queryable.Expressions.Methods.SingleTranslator">
            <summary>
                LINQ Single method translator.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.Queryable.Expressions.Methods.FirstOrDefaultTranslator">
            <summary>
                LINQ FirstOrDefault method translator.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.Queryable.Expressions.Methods.FirstTranslator">
            <summary>
                LINQ First method translator.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.Queryable.Expressions.Methods.WhereTranslator">
            <summary>
                LINQ Where method translator.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.RequestExecutor.TableRequestExecutorFactory`1">
            <summary>
                Handles construction of table request executors.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.TableRequestExecutorFactory`1.#ctor(WindowsAzure.Table.Wrappers.ICloudTable,WindowsAzure.Table.EntityConverters.ITableEntityConverter{`0})">
            <summary>
                Constructor.
            </summary>
            <param name="cloudTable">Cloud table.</param>
            <param name="entityConverter">Entity converter.</param>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.TableRequestExecutorFactory`1.Create(WindowsAzure.Table.ExecutionMode)">
            <summary>
                Creates a new <see cref="T:WindowsAzure.Table.RequestExecutor.ITableRequestExecutor`1"/>.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="executionMode">Execution mode.</param>
            <returns>
                <see cref="T:WindowsAzure.Table.RequestExecutor.ITableRequestExecutor`1"/>
            </returns>
        </member>
        <member name="T:WindowsAzure.Table.RequestExecutor.TableRequestSequentialExecutor`1">
            <summary>
                Handles query execution.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
        </member>
        <member name="T:WindowsAzure.Table.RequestExecutor.ITableRequestExecutor`1">
            <summary>
                Handles query execution.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.ITableRequestExecutor`1.Execute(`0,System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation})">
            <summary>
                Executes operation.
            </summary>
            <param name="entity">Entity.</param>
            <param name="operation">Operation.</param>
            <returns>Result entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.ITableRequestExecutor`1.ExecuteWithoutResult(`0,System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation})">
            <summary>
                Executes operation without returning result.
            </summary>
            <param name="entity">Entity.</param>
            <param name="operation">Operation.</param>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.ITableRequestExecutor`1.ExecuteAsync(`0,System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation},System.Threading.CancellationToken)">
            <summary>
                Executes operation asynchronously.
            </summary>
            <param name="entity">Entity.</param>
            <param name="operation">Operation.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Result entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.ITableRequestExecutor`1.ExecuteWithoutResultAsync(`0,System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation},System.Threading.CancellationToken)">
            <summary>
                Executes operation without returning result asynchronously.
            </summary>
            <param name="entity">Entity.</param>
            <param name="operation">Operation.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.ITableRequestExecutor`1.ExecuteBatches(System.Collections.Generic.IEnumerable{`0},System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation})">
            <summary>
                Executes batch operations.
            </summary>
            <param name="entities">List of entities.</param>
            <param name="operation">Table operation.</param>
            <returns>Result entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.ITableRequestExecutor`1.ExecuteBatchesWithoutResult(System.Collections.Generic.IEnumerable{`0},System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation})">
            <summary>
                Executes batch operations without returning results.
            </summary>
            <param name="entities">List of entities.</param>
            <param name="operation">Table operation.</param>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.ITableRequestExecutor`1.ExecuteBatchesAsync(System.Collections.Generic.IEnumerable{`0},System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation},System.Threading.CancellationToken)">
            <summary>
                Executes batch operations asynchronously.
            </summary>
            <param name="entities">List of entities.</param>
            <param name="operation">Table operation.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Result entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.ITableRequestExecutor`1.ExecuteBatchesWithoutResultAsync(System.Collections.Generic.IEnumerable{`0},System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation},System.Threading.CancellationToken)">
            <summary>
                Executes batch operations without returning results asynchronously.
            </summary>
            <param name="entities">List of entities.</param>
            <param name="operation">Table operation.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.TableRequestExecutorBase`1.#ctor(WindowsAzure.Table.Wrappers.ICloudTable,WindowsAzure.Table.EntityConverters.ITableEntityConverter{`0})">
            <summary>
                Constructor.
            </summary>
            <param name="cloudTable">Cloud table.</param>
            <param name="entityConverter">Entity converter.</param>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.TableRequestExecutorBase`1.Execute(`0,System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation})">
            <summary>
                Executes operation.
            </summary>
            <param name="entity">Entity.</param>
            <param name="operation">Operation.</param>
            <returns>Result entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.TableRequestExecutorBase`1.ExecuteWithoutResult(`0,System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation})">
            <summary>
                Executes operation without returning result.
            </summary>
            <param name="entity">Entity.</param>
            <param name="operation">Operation.</param>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.TableRequestExecutorBase`1.ExecuteAsync(`0,System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation},System.Threading.CancellationToken)">
            <summary>
                Executes operation asynchronously.
            </summary>
            <param name="entity">Entity.</param>
            <param name="operation">Operation.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Result entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.TableRequestExecutorBase`1.ExecuteWithoutResultAsync(`0,System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation},System.Threading.CancellationToken)">
            <summary>
                Executes operation without returning result asynchronously.
            </summary>
            <param name="entity">Entity.</param>
            <param name="operation">Operation.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.TableRequestSequentialExecutor`1.#ctor(WindowsAzure.Table.Wrappers.ICloudTable,WindowsAzure.Table.EntityConverters.ITableEntityConverter{`0},WindowsAzure.Table.RequestExecutor.ITableBatchPartitioner)">
            <summary>
                Constructor.
            </summary>
            <param name="cloudTable">Cloud table.</param>
            <param name="entityConverter">Entity converter.</param>
            <param name="partitioner">Batch partitioner.</param>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.TableRequestSequentialExecutor`1.ExecuteBatches(System.Collections.Generic.IEnumerable{`0},System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation})">
            <summary>
                Executes batch operations.
            </summary>
            <param name="entities">List of entities.</param>
            <param name="operation">Table operation.</param>
            <returns>Result entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.TableRequestSequentialExecutor`1.ExecuteBatchesWithoutResult(System.Collections.Generic.IEnumerable{`0},System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation})">
            <summary>
                Executes batch operations without returning results.
            </summary>
            <param name="entities">List of entities.</param>
            <param name="operation">Table operation.</param>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.TableRequestSequentialExecutor`1.ExecuteBatchesAsync(System.Collections.Generic.IEnumerable{`0},System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation},System.Threading.CancellationToken)">
            <summary>
                Executes batch operations asynchronously.
            </summary>
            <param name="entities">List of entities.</param>
            <param name="operation">Table operation.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Result entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.TableRequestSequentialExecutor`1.ExecuteBatchesWithoutResultAsync(System.Collections.Generic.IEnumerable{`0},System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation},System.Threading.CancellationToken)">
            <summary>
                Executes batch operations without returning results asynchronously.
            </summary>
            <param name="entities">List of entities.</param>
            <param name="operation">Table operation.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="T:WindowsAzure.Table.RequestExecutor.ITableBatchPartitioner">
            <summary>
                Handles entities batching in insert operations.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.ITableBatchPartitioner.GetBatches(System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.Storage.Table.ITableEntity},System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation})">
            <summary>
                Generates a list of batches according to partitioning settings.
            </summary>
            <param name="tableEntities">Entities collection.</param>
            <param name="operation">Table operation.</param>
            <returns>Batches.</returns>
        </member>
        <member name="T:WindowsAzure.Table.RequestExecutor.TableBatchPartitioner">
            <summary>
                Handles entities batching in insert operations.
                http://msdn.microsoft.com/en-us/library/windowsazure/dd894038.aspx
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.TableBatchPartitioner.GetBatches(System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.Storage.Table.ITableEntity},System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation})">
            <summary>
                Generates a list of batches according to partitioning settings.
            </summary>
            <param name="tableEntities">Entities collection.</param>
            <param name="operation">Table operation.</param>
            <returns>Batches.</returns>
        </member>
        <member name="T:WindowsAzure.Table.ExecutionMode">
            <summary>
                Request execution mode.
            </summary>
        </member>
        <member name="F:WindowsAzure.Table.ExecutionMode.Sequential">
            <summary>
                Sequential execution.
            </summary>
        </member>
        <member name="F:WindowsAzure.Table.ExecutionMode.Parallel">
            <summary>
                Parallel execution.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.EntityConverters.TypeData.Properties.ETagProperty`1">
            <summary>
                Handles access to the etag value.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
        </member>
        <member name="T:WindowsAzure.Table.EntityConverters.TypeData.Properties.IProperty`1">
            <summary>
                Handles access to the property value.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.Properties.IProperty`1.SetMemberValue(Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity,`0)">
            <summary>
                Sets a POCO member value from table entity.
            </summary>
            <param name="tableEntity">Table entity.</param>
            <param name="entity">POCO entity.</param>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.Properties.IProperty`1.GetMemberValue(`0,Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity)">
            <summary>
                Gets a POCO member value for table entity.
            </summary>
            <param name="entity">POCO entity.</param>
            <param name="tableEntity">Table entity.</param>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.Properties.ETagProperty`1.#ctor(System.Reflection.MemberInfo)">
            <summary>
                Constructor.
            </summary>
            <param name="member">Entity member.</param>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.Properties.ETagProperty`1.SetMemberValue(Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity,`0)">
            <summary>
                Sets a POCO member value from table entity.
            </summary>
            <param name="tableEntity">Table entity.</param>
            <param name="entity">POCO entity.</param>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.Properties.ETagProperty`1.GetMemberValue(`0,Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity)">
            <summary>
                Gets a POCO member value for table entity.
            </summary>
            <param name="entity">POCO entity.</param>
            <param name="tableEntity">Table entity.</param>
        </member>
        <member name="T:WindowsAzure.Table.EntityConverters.TypeData.Properties.PartitionKeyProperty`1">
            <summary>
                Handles access to the partition key value.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.Properties.PartitionKeyProperty`1.#ctor(System.Reflection.MemberInfo)">
            <summary>
                Constructor.
            </summary>
            <param name="member">Entity member.</param>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.Properties.PartitionKeyProperty`1.SetMemberValue(Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity,`0)">
            <summary>
                Sets a POCO member value from table entity.
            </summary>
            <param name="tableEntity">Table entity.</param>
            <param name="entity">POCO entity.</param>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.Properties.PartitionKeyProperty`1.GetMemberValue(`0,Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity)">
            <summary>
                Gets a POCO member value for table entity.
            </summary>
            <param name="entity">POCO entity.</param>
            <param name="tableEntity">Table entity.</param>
        </member>
        <member name="T:WindowsAzure.Table.EntityConverters.TypeData.Properties.RegularProperty`1">
            <summary>
                Handles access to the property value.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.Properties.RegularProperty`1.#ctor(System.Reflection.MemberInfo)">
            <summary>
                Constructor.
            </summary>
            <param name="member">Entity member.</param>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.Properties.RegularProperty`1.#ctor(System.Reflection.MemberInfo,System.String)">
            <summary>
                Constructor.
            </summary>
            <param name="member">Entity member.</param>
            <param name="name">Member name.</param>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.Properties.RegularProperty`1.SetMemberValue(Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity,`0)">
            <summary>
                Sets a POCO member value from table entity.
            </summary>
            <param name="tableEntity">Table entity.</param>
            <param name="entity">POCO entity.</param>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.Properties.RegularProperty`1.GetMemberValue(`0,Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity)">
            <summary>
                Gets a POCO member value for table entity.
            </summary>
            <param name="entity">POCO entity.</param>
            <param name="tableEntity">Table entity.</param>
        </member>
        <member name="T:WindowsAzure.Table.EntityConverters.TypeData.Properties.RowKeyProperty`1">
            <summary>
                Handles access to the row key value.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.Properties.RowKeyProperty`1.#ctor(System.Reflection.MemberInfo)">
            <summary>
                Constructor.
            </summary>
            <param name="member">Entity member.</param>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.Properties.RowKeyProperty`1.SetMemberValue(Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity,`0)">
            <summary>
                Sets a POCO member value from table entity.
            </summary>
            <param name="tableEntity">Table entity.</param>
            <param name="entity">POCO entity.</param>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.Properties.RowKeyProperty`1.GetMemberValue(`0,Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity)">
            <summary>
                Gets a POCO member value for table entity.
            </summary>
            <param name="entity">POCO entity.</param>
            <param name="tableEntity">Table entity.</param>
        </member>
        <member name="T:WindowsAzure.Table.EntityConverters.TypeData.Properties.TimestampProperty`1">
            <summary>
                Handles access to the timestamp value.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.Properties.TimestampProperty`1.#ctor(System.Reflection.MemberInfo)">
            <summary>
                Constructor.
            </summary>
            <param name="member">Entity member.</param>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.Properties.TimestampProperty`1.SetMemberValue(Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity,`0)">
            <summary>
                Sets a POCO member value from table entity.
            </summary>
            <param name="tableEntity">Table entity.</param>
            <param name="entity">POCO entity.</param>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.Properties.TimestampProperty`1.GetMemberValue(`0,Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity)">
            <summary>
                Gets a POCO member value for table entity.
            </summary>
            <param name="entity">POCO entity.</param>
            <param name="tableEntity">Table entity.</param>
        </member>
        <member name="T:WindowsAzure.Table.EntityConverters.TypeData.ValueAccessors.ValueAccessorBase`1">
            <summary>
                Handles access operations to the entity type member via Expressions.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
        </member>
        <member name="T:WindowsAzure.Table.EntityConverters.TypeData.ValueAccessors.IValueAccessor`1">
            <summary>
                Entity member value accessor.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
        </member>
        <member name="P:WindowsAzure.Table.EntityConverters.TypeData.ValueAccessors.IValueAccessor`1.GetValue">
            <summary>
                Gets an entity memeber accessor.
            </summary>
        </member>
        <member name="P:WindowsAzure.Table.EntityConverters.TypeData.ValueAccessors.IValueAccessor`1.SetValue">
            <summary>
                Sets an entity member mutator.
            </summary>
        </member>
        <member name="P:WindowsAzure.Table.EntityConverters.TypeData.ValueAccessors.IValueAccessor`1.Type">
            <summary>
                Gets a member type.
            </summary>
        </member>
        <member name="P:WindowsAzure.Table.EntityConverters.TypeData.ValueAccessors.IValueAccessor`1.Name">
            <summary>
                Gets a member name.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.ValueAccessors.ValueAccessorBase`1.CreateValueAccessors(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.MemberExpression)">
            <summary>
                Initializes a value accessor.
            </summary>
        </member>
        <member name="P:WindowsAzure.Table.EntityConverters.TypeData.ValueAccessors.ValueAccessorBase`1.GetValue">
            <summary>
                Gets an entity member accessor.
            </summary>
        </member>
        <member name="P:WindowsAzure.Table.EntityConverters.TypeData.ValueAccessors.ValueAccessorBase`1.SetValue">
            <summary>
                Sets an entity member mutator.
            </summary>
        </member>
        <member name="P:WindowsAzure.Table.EntityConverters.TypeData.ValueAccessors.ValueAccessorBase`1.Type">
            <summary>
                Gets a member type.
            </summary>
        </member>
        <member name="P:WindowsAzure.Table.EntityConverters.TypeData.ValueAccessors.ValueAccessorBase`1.Name">
            <summary>
                Gets a member name.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.EntityConverters.TypeData.ValueAccessors.PropertyValueAccessor`1">
            <summary>
                Handles property value manipulations.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.ValueAccessors.PropertyValueAccessor`1.#ctor(System.Reflection.PropertyInfo)">
            <summary>
                Creates a property value accessor.
            </summary>
            <param name="propertyInfo">Property info.</param>
        </member>
        <member name="T:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeData`1">
            <summary>
                Keeps an entity type data.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeData`1.#ctor">
            <summary>
                Constructor.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeData`1.CreateTimestampProperty(System.Reflection.MemberInfo,System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Creates a new timestamp property.
            </summary>
            <param name="member">Entity member.</param>
            <param name="attribute">Timestamp attribute.</param>
            <param name="nameChanges">Name changes.</param>
            <returns>Timestamp property.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeData`1.CreateRowKeyProperty(System.Reflection.MemberInfo,System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Creates a new row key property.
            </summary>
            <param name="member">Entity member.</param>
            <param name="attribute">Row key attribute.</param>
            <param name="nameChanges">Name changes.</param>
            <returns>Row key property.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeData`1.CreateNamedProperty(System.Reflection.MemberInfo,System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Creates a new named property.
            </summary>
            <param name="member">Entity member.</param>
            <param name="attribute">Property attribute.</param>
            <param name="nameChanges">Name changes.</param>
            <returns>Property.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeData`1.CreatePartitionKeyProperty(System.Reflection.MemberInfo,System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Creates a new partition key property.
            </summary>
            <param name="member">Entity member.</param>
            <param name="attribute">Partition key attribute.</param>
            <param name="nameChanges">Name changes.</param>
            <returns>Partition key property.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeData`1.CreateETagProperty(System.Reflection.MemberInfo,System.Object,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Creates a new etag property.
            </summary>
            <param name="member">Entity member.</param>
            <param name="attribute">ETag attribute.</param>
            <param name="nameChanges">Name changes.</param>
            <returns>ETag property.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeData`1.GetMemberProperty(System.Reflection.MemberInfo,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Creates a new entity member property.
            </summary>
            <param name="member">Entity member.</param>
            <param name="nameChanges">Name changes.</param>
            <returns>Property.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeData`1.SelectMetadataAttributes(System.Object[])">
            <summary>
                Selects a metadata attributes.
            </summary>
            <param name="attributes">Entity attributes.</param>
            <returns>Metadata attributes.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeData`1.GetEntity(Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity)">
            <summary>
                Converts <see cref="T:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity" /> into POCO.
            </summary>
            <param name="tableEntity">Table entity.</param>
            <returns>POCO.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeData`1.GetEntity(`0)">
            <summary>
                Converts POCO into <see cref="T:Microsoft.WindowsAzure.Storage.Table.ITableEntity" />.
            </summary>
            <param name="entity">POCO entity.</param>
            <returns>Table entity.</returns>
        </member>
        <member name="P:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeData`1.NameChanges">
            <summary>
                Gets a name changes for entity members.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeDataFactory">
            <summary>
                Manages entity type data collections.
            </summary>
        </member>
        <member name="F:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeDataFactory._mappingAssemblies">
            <summary>
                Assemblies to find entity type map.
            </summary>
        </member>
        <member name="F:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeDataFactory.EntityTypeMap">
            <summary>
                Entity type map definition.
            </summary>
        </member>
        <member name="F:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeDataFactory.TypesData">
            <summary>
                Entity type data cache.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeDataFactory.GetEntityTypeData``1">
            <summary>
                Retrieves an entity type data.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <returns>Entity type data.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeDataFactory.RegisterEntityTypeData``1(WindowsAzure.Table.EntityConverters.TypeData.IEntityTypeData{``0})">
            <summary>
                Registers an entity type data.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
            <param name="entityTypeData">Entity type data.</param>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeDataFactory.RegisterEntityTypeData(System.Type,System.Object)">
            <summary>
                Registers an entity type data.
            </summary>
            <param name="entityType">Entity type.</param>
            <param name="entityTypeData">Entity type data.</param>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.EntityTypeDataFactory.FindsEntityTypeMap(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Type)">
            <summary>
                Finds an entity type mapping.
            </summary>
            <param name="assembliesToSearch">Aseemblies to search mapping types.</param>
            <param name="entityType">Entity type.</param>
            <returns>An instance of entity type mapping.</returns>
        </member>
        <member name="T:WindowsAzure.Table.EntityConverters.TypeData.ValueAccessors.FieldValueAccessor`1">
            <summary>
                Handles field value manipulations.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.ValueAccessors.FieldValueAccessor`1.#ctor(System.Reflection.FieldInfo)">
            <summary>
                Constructor.
            </summary>
            <param name="fieldInfo">Field info.</param>
        </member>
        <member name="T:WindowsAzure.Table.EntityConverters.ITableEntityConverter`1">
            <summary>
                Table entity converter.
            </summary>
            <typeparam name="TEntity">Entity type.</typeparam>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.ITableEntityConverter`1.GetEntity(`0)">
            <summary>
                Converts an entity to table entity.
            </summary>
            <param name="entity">Entity.</param>
            <returns>Table entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.ITableEntityConverter`1.GetEntity(Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity)">
            <summary>
                Converts a table entity to entity.
            </summary>
            <param name="tableEntity">Table entity.</param>
            <returns>Entity.</returns>
        </member>
        <member name="P:WindowsAzure.Table.EntityConverters.ITableEntityConverter`1.NameChanges">
            <summary>
                Gets an entity property name maping connection.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.EntityConverters.TypeData.ValueAccessors.ValueAccessorFactory">
            <summary>
                Manages creation of the property value accessors.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TypeData.ValueAccessors.ValueAccessorFactory.Create``1(System.Reflection.MemberInfo)">
            <summary>
                Creates a value accessor.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="memberInfo">Member info.</param>
            <returns>Value accessor.</returns>
        </member>
        <member name="T:WindowsAzure.Table.Extensions.AsyncQueryExtensions">
            <summary>
                LINQ extensions for a asynchronous query execution.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.AsyncQueryExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Executes a query ToList method asynchronously.
            </summary>
            <typeparam name="T">The entity type of the query.</typeparam>
            <param name="source">Query.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>List of entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.AsyncQueryExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Executes a query ToList method asynchronously.
            </summary>
            <typeparam name="T">The entity type of the query.</typeparam>
            <param name="source">Query.</param>
            <param name="predicate">Predicate.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>List of entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.AsyncQueryExtensions.TakeAsync``1(System.Linq.IQueryable{``0},System.Int32,System.Threading.CancellationToken)">
            <summary>
                Executes a query Take method asynchronously.
            </summary>
            <typeparam name="T">The entity type of the query.</typeparam>
            <param name="source">Query.</param>
            <param name="count">Entities count.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.AsyncQueryExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Executes a query First method asynchronously.
            </summary>
            <typeparam name="T">The entity type of the query.</typeparam>
            <param name="source">Query.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.AsyncQueryExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Executes a query First method asynchronously.
            </summary>
            <typeparam name="T">The entity type of the query.</typeparam>
            <param name="source">Query.</param>
            <param name="predicate">Predicate.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.AsyncQueryExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Executes a query FirstOrDefault asynchronously.
            </summary>
            <typeparam name="T">The entity type of the query.</typeparam>
            <param name="source">Query.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.AsyncQueryExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Executes a query FirstOrDefault asynchronously.
            </summary>
            <typeparam name="T">The entity type of the query.</typeparam>
            <param name="source">Query.</param>
            <param name="predicate">Predicate.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.AsyncQueryExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Executes a query Single asynchronously.
            </summary>
            <typeparam name="T">The entity type of the query.</typeparam>
            <param name="source">Query.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.AsyncQueryExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Executes a query Single asynchronously.
            </summary>
            <typeparam name="T">The entity type of the query.</typeparam>
            <param name="source">Query.</param>
            <param name="predicate">Predicate.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.AsyncQueryExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
            <summary>
                Executes a query SingleOrDefault method asynchronously.
            </summary>
            <typeparam name="T">The entity type of the query.</typeparam>
            <param name="source">Query.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.AsyncQueryExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
                Executes a query SingleOrDefault method asynchronously.
            </summary>
            <typeparam name="T">The entity type of the query.</typeparam>
            <param name="source">Query.</param>
            <param name="predicate">Predicate.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Entity.</returns>
        </member>
        <member name="T:WindowsAzure.Table.Extensions.CloudTableClientExtensions">
            <summary>
                Cloud table client extensions.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableClientExtensions.GetServicePropertiesAsync(Microsoft.WindowsAzure.Storage.Table.CloudTableClient,System.Threading.CancellationToken)">
            <summary>
                Gets the properties of the table service asynchronously.
            </summary>
            <param name="tableClient">Cloud table client.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableClientExtensions.SetServicePropertiesAsync(Microsoft.WindowsAzure.Storage.Table.CloudTableClient,Microsoft.WindowsAzure.Storage.Shared.Protocol.ServiceProperties,System.Threading.CancellationToken)">
            <summary>
                Sets the properties of the table service asynchronously.
            </summary>
            <param name="tableClient">Cloud table client.</param>
            <param name="serviceProperties">The table service properties.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableClientExtensions.ListTablesSegmentedAsync(Microsoft.WindowsAzure.Storage.Table.CloudTableClient,System.String,System.Nullable{System.Int32},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)">
            <summary>
                Returns an enumerable collection of tables in the storage account asynchronously.
            </summary>
            <param name="tableClient">Cloud table client.</param>
            <param name="prefix">The table name prefix.</param>
            <param name="maxResults">
                A non-negative integer value that indicates the maximum number of results to be returned at a time, up to the
                per-operation limit of 5000. If this value is zero the maximum possible number of results will be returned, up to 5000.
            </param>
            <param name="continuationToken">Continuation token.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
                An enumerable collection of tables that are retrieved lazily.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableClientExtensions.ListTablesSegmentedAsync(Microsoft.WindowsAzure.Storage.Table.CloudTableClient,System.String,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)">
            <summary>
                Returns an enumerable collection of tables in the storage account asynchronously.
            </summary>
            <param name="tableClient">Cloud table client.</param>
            <param name="prefix">The table name prefix.</param>
            <param name="continuationToken">
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" /> returned by a previous listing operation.
            </param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
                An enumerable collection of tables that are retrieved lazily.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableClientExtensions.ListTablesAsync(Microsoft.WindowsAzure.Storage.Table.CloudTableClient,System.Threading.CancellationToken)">
            <summary>
                Gets the properties of the table service asynchronously.
            </summary>
            <param name="tableClient">Cloud table client.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>An enumerable collection of tables that are retrieved.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableClientExtensions.ListTablesAsync(Microsoft.WindowsAzure.Storage.Table.CloudTableClient,System.String,System.Threading.CancellationToken)">
            <summary>
                Gets the properties of the table service asynchronously.
            </summary>
            <param name="tableClient">Cloud table client.</param>
            <param name="prefix">The table name prefix.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>An enumerable collection of tables that are retrieved.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableClientExtensions.ListTablesAsync(Microsoft.WindowsAzure.Storage.Table.CloudTableClient,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Gets the properties of the table service asynchronously.
            </summary>
            <param name="tableClient">Cloud table client.</param>
            <param name="prefix">The table name prefix.</param>
            <param name="maxResults">
                A non-negative integer value that indicates the maximum number of results to be returned at a time, up to the
                per-operation limit of 5000. If this value is zero the maximum possible number of results will be returned, up to 5000.
            </param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>An enumerable collection of tables that are retrieved.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableClientExtensions.ListTablesImplAsync(Microsoft.WindowsAzure.Storage.Table.CloudTableClient,System.Collections.Generic.List{Microsoft.WindowsAzure.Storage.Table.CloudTable},System.String,System.Nullable{System.Int32},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)">
            <summary>
                Returns an enumerable collection of tables in the storage account asynchronously.
            </summary>
            <param name="tableClient">Cloud table client.</param>
            <param name="cloudTables">List of cloud tables.</param>
            <param name="prefix">The table name prefix.</param>
            <param name="maxResults">
                A non-negative integer value that indicates the maximum number of results to be returned at a time, up to the
                per-operation limit of 5000. If this value is zero the maximum possible number of results will be returned, up to 5000.
            </param>
            <param name="continuationToken">Continuation token.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
                An enumerable collection of tables that are retrieved.
            </returns>
        </member>
        <member name="T:WindowsAzure.Table.Extensions.CloudTableExtensions">
            <summary>
                Cloud Table Extensions.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableExtensions.CreateAsync(Microsoft.WindowsAzure.Storage.Table.CloudTable,System.Threading.CancellationToken)">
            <summary>
                Creates a table asynchronously.
            </summary>
            <param name="cloudTable">Cloud table.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableExtensions.CreateIfNotExistsAsync(Microsoft.WindowsAzure.Storage.Table.CloudTable,System.Threading.CancellationToken)">
            <summary>
                Creates the table if it does not already exist asynchronously.
            </summary>
            <param name="cloudTable">Cloud table.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
                <c>true</c> if table was created; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableExtensions.DeleteAsync(Microsoft.WindowsAzure.Storage.Table.CloudTable,System.Threading.CancellationToken)">
            <summary>
                Deletes a table asynchronously.
            </summary>
            <param name="cloudTable">Cloud table.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableExtensions.DeleteIfExistsAsync(Microsoft.WindowsAzure.Storage.Table.CloudTable,System.Threading.CancellationToken)">
            <summary>
                Deletes the table if it exists asynchronously.
            </summary>
            <param name="cloudTable">Cloud table.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
                <c>true</c> if the table was deleted; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableExtensions.ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.CloudTable,Microsoft.WindowsAzure.Storage.Table.TableOperation,System.Threading.CancellationToken)">
            <summary>
                Executes table operation asynchronously.
            </summary>
            <param name="cloudTable">Cloud table.</param>
            <param name="tableOperation">
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableOperation" /> object that represents the operation to perform.
            </param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableResult" /> containing the result of executing the operation on the table.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableExtensions.ExecuteQueryAsync(Microsoft.WindowsAzure.Storage.Table.CloudTable,Microsoft.WindowsAzure.Storage.Table.TableQuery,System.Threading.CancellationToken)">
            <summary>
                Executes a query on a table asynchronously.
            </summary>
            <param name="cloudTable">Cloud table.</param>
            <param name="tableQuery">Table query.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
                An enumerable collection of <see cref="T:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity" /> objects, representing table entities returned by the query.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableExtensions.ExecuteQuerySegmentedImplAsync(Microsoft.WindowsAzure.Storage.Table.CloudTable,System.Collections.Generic.List{Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity},Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)">
            <summary>
                Aggregates query execution segments.
            </summary>
            <param name="cloudTable">Cloud table.</param>
            <param name="tableEntities">Table entities.</param>
            <param name="tableQuery">Table query.</param>
            <param name="continuationToken">Continuation token.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
                An enumerable collection of <see cref="T:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity" /> objects, representing table entities returned by the query.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableExtensions.ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.CloudTable,Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,System.Threading.CancellationToken)">
            <summary>
                Executes a batch of operations on a table asynchronously.
            </summary>
            <param name="cloudTable">Cloud table.</param>
            <param name="tableBatchOperation">
                The <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" /> object representing the operations to execute on the table.
            </param>
            <param name="cancellationToken">Cancalltion token.</param>
            <returns>
                An enumerable collection of <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableResult" /> objects that contains the results, in order, of each operation in the
                <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" />
                on the table.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableExtensions.ExecuteQuerySegmentedAsync(Microsoft.WindowsAzure.Storage.Table.CloudTable,Microsoft.WindowsAzure.Storage.Table.TableQuery,Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)">
            <summary>
                Executes an operation to query a table in segmented mode asynchronously.
            </summary>
            <param name="cloudTable">Cloud table.</param>
            <param name="tableQuery">
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableQuery" /> instance specifying the table to query and the query parameters to use, specialized for a type <c>TElement</c>.
            </param>
            <param name="continuationToken">
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" /> object representing a continuation token from the server when the operation returns a partial result.
            </param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1" /> containing the projection into type <c>R</c> of the results of executing the query.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableExtensions.ExecuteQuerySegmentedAsync``1(Microsoft.WindowsAzure.Storage.Table.CloudTable,Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)">
            <summary>
                Executes an operation to query a table in segmented mode asynchronously.
            </summary>
            <typeparam name="TElement">The entity type of the query.</typeparam>
            <param name="cloudTable">Cloud table.</param>
            <param name="tableQuery">
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableQuery" /> instance specifying the table to query and the query parameters to use, specialized for a type <c>TElement</c>.
            </param>
            <param name="continuationToken">
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" /> object representing a continuation token from the server when the operation returns a partial result.
            </param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1" /> containing the projection into type <c>R</c> of the results of executing the query.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableExtensions.ExecuteQuerySegmentedAsync``2(Microsoft.WindowsAzure.Storage.Table.CloudTable,Microsoft.WindowsAzure.Storage.Table.TableQuery{``0},Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1},Microsoft.WindowsAzure.Storage.Table.TableContinuationToken,System.Threading.CancellationToken)">
            <summary>
                Executes an operation to query a table in segmented mode asynchronously.
            </summary>
            <typeparam name="TElement">The entity type of the query.</typeparam>
            <typeparam name="TR">
                The type into which the <see cref="T:Microsoft.WindowsAzure.Storage.Table.EntityResolver" /> will project the query results.
            </typeparam>
            <param name="cloudTable">Cloud table.</param>
            <param name="tableQuery">
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableQuery" /> instance specifying the table to query and the query parameters to use, specialized for a type <c>TElement</c>.
            </param>
            <param name="entityResolver">
                An <see cref="T:Microsoft.WindowsAzure.Storage.Table.EntityResolver" /> instance which creates a projection of the table query result entities into the specified type <c>R</c>.
            </param>
            <param name="continuationToken">
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableContinuationToken" /> object representing a continuation token from the server when the operation returns a partial result.
            </param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableQuerySegment`1" /> containing the projection into type <c>R</c> of the results of executing the query.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableExtensions.ExistsAsync(Microsoft.WindowsAzure.Storage.Table.CloudTable,System.Threading.CancellationToken)">
            <summary>
                Checks whether the table exists asynchronously.
            </summary>
            <param name="cloudTable">Cloud table.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
                <c>true</c> if table exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableExtensions.GetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.CloudTable,System.Threading.CancellationToken)">
            <summary>
                Gets the permissions settings for the table asynchronously.
            </summary>
            <param name="cloudTable">Cloud table.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
                The table's permissions.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Extensions.CloudTableExtensions.SetPermissionsAsync(Microsoft.WindowsAzure.Storage.Table.CloudTable,Microsoft.WindowsAzure.Storage.Table.TablePermissions,System.Threading.CancellationToken)">
            <summary>
                Sets the permissions settings for the table asynchronously.
            </summary>
            <param name="cloudTable">Cloud table.</param>
            <param name="tablePermissions">
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TablePermissions" /> object that represents the permissions to set.
            </param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="T:WindowsAzure.Table.Attributes.PartitionKeyAttribute">
            <summary>
                Defines whether property should keep a partition key value.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.ITableSet`1">
            <summary>
                Interface for a Windows Azure TableSet.
            </summary>
            <typeparam name="TEntity">Entity type.</typeparam>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.Add(`0)">
            <summary>
                Inserts a new entity.
            </summary>
            <param name="entity">Entity.</param>
            <returns>Inserted entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Inserts a new entity asynchronously.
            </summary>
            <param name="entity">Entity.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Inserted entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Inserts a new entities.
            </summary>
            <param name="entities">Entities collection.</param>
            <returns>Inserted entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.AddAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                Inserts a new entities asynchronously.
            </summary>
            <param name="entities">Entities collection.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Inserted entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.AddOrUpdate(`0)">
            <summary>
                Inserts or updates an entity.
            </summary>
            <param name="entity">Entity.</param>
            <returns>Inserted entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.AddOrUpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Inserts or updates an entity asynchronously.
            </summary>
            <param name="entity">Entity.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Inserted entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.AddOrUpdate(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Inserts or updates an entities.
            </summary>
            <param name="entities">Entities collection.</param>
            <returns>Inserted entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.AddOrUpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                Inserts or updates an entities asynchronously.
            </summary>
            <param name="entities">Entities collection.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Inserted entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.AddOrMerge(`0)">
            <summary>
                Inserts or merges an entity.
            </summary>
            <param name="entity">Entity.</param>
            <returns>Inserted entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.AddOrMergeAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Inserts or merges an entity asynchronously.
            </summary>
            <param name="entity">Entity.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Inserted entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.AddOrMerge(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Inserts or updates an entities.
            </summary>
            <param name="entities">Entities collection.</param>
            <returns>Inserted entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.AddOrMergeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                Inserts or updates an entities asynchronously.
            </summary>
            <param name="entities">Entities collection.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Inserted entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.Update(`0)">
            <summary>
                Updates an entity.
            </summary>
            <param name="entity">Entity.</param>
            <returns>Updated entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Updates an entity asynchronously.
            </summary>
            <param name="entity">Entity.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Updated entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Updates an entities.
            </summary>
            <param name="entities">Entities collection.</param>
            <returns>Updated entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                Updates an entities asynchronously.
            </summary>
            <param name="entities">Entities collection.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Updated entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.Remove(`0)">
            <summary>
                Removes an entity.
            </summary>
            <param name="entity">Entity.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.RemoveAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Removes an entity asynchronously.
            </summary>
            <param name="entity">Entity.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Removes an entities.
            </summary>
            <param name="entities">Entities collection.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.RemoveAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                Removes an entities asynchronously.
            </summary>
            <param name="entities">Entities collection.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.CreateIfNotExists">
            <summary>
                Creates the table if it does not already exist.
            </summary>
            <returns>
                <c>true</c> if table was created; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.ITableSet`1.CreateIfNotExistsAsync(System.Threading.CancellationToken)">
            <summary>
                Initiates an asynchronous operation to create a table if it does not already exist.
            </summary>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a
                task to complete.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task`1" /> object of type <c>bool</c> that represents the asynchronous
                operation.
            </returns>
        </member>
        <member name="P:WindowsAzure.Table.ITableSet`1.ExecutionMode">
            <summary>
                Gets or sets a value indicating request execution mode.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.Queryable.Expressions.IQueryTranslator">
            <summary>
                Defines interface of LINQ Exression translator.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.IQueryTranslator.Translate(System.Linq.Expressions.Expression,WindowsAzure.Table.Queryable.Expressions.ITranslationResult)">
            <summary>
                Translates an expression into collection of query segments.
            </summary>
            <param name="expression">Expression.</param>
            <param name="result">Translaion result.</param>
            <returns>Table query.</returns>
        </member>
        <member name="T:WindowsAzure.Table.Queryable.Expressions.ITranslationResult">
            <summary>
                Defines interface of OData translation result.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.ITranslationResult.AddFilter(System.String)">
            <summary>
                Adds a filter expression.
            </summary>
            <param name="filter">Filter expression.</param>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.ITranslationResult.AddTop(System.Int32)">
            <summary>
                Adds a required count of query elements.
            </summary>
            <param name="top">Count of elements.</param>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.ITranslationResult.AddColumn(System.String)">
            <summary>
                Adds a required column name.
            </summary>
            <param name="column">Column name.</param>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.ITranslationResult.AddPostProcesing(System.Linq.Expressions.LambdaExpression)">
            <summary>
                Adds a post processing expression.
            </summary>
            <param name="lambda">Expression.</param>
        </member>
        <member name="T:WindowsAzure.Table.Queryable.Expressions.Infrastructure.ExpressionEvaluator">
            <summary>
                Performs evaluation of the LINQ Expression.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.Infrastructure.ExpressionEvaluator.Evaluate(System.Linq.Expressions.Expression)">
            <summary>
                Evaluates an expression.
            </summary>
            <param name="expression">Source expression.</param>
            <returns>Evaluated expression.</returns>
        </member>
        <member name="T:WindowsAzure.Table.Queryable.Expressions.Infrastructure.SerializationExtensions">
            <summary>
                Performs a constant value serialization.
            </summary>
        </member>
        <member name="F:WindowsAzure.Table.Queryable.Expressions.Infrastructure.SerializationExtensions.Serialization">
            <summary>
                Collection of supported constant types.
                http://www.odata.org/documentation/overview/#6_Primitive_Data_Types
            </summary>
        </member>
        <member name="F:WindowsAzure.Table.Queryable.Expressions.Infrastructure.SerializationExtensions.LogicalOperators">
            <summary>
                Collection of supported logical operands.
                http://www.odata.org/documentation/uri-conventions/#45_Filter_System_Query_Option_filter
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.Infrastructure.SerializationExtensions.Serialize(System.Linq.Expressions.ConstantExpression)">
            <summary>
                Serializes constant value.
            </summary>
            <param name="constant">Constant expression.</param>
            <returns>Serialized value.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.Infrastructure.SerializationExtensions.Serialize(System.Linq.Expressions.ExpressionType)">
            <summary>
                Serializes logical operator.
            </summary>
            <param name="type">Expression type.</param>
            <returns>Serialized value.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.Infrastructure.SerializationExtensions.IsSupported(System.Linq.Expressions.ExpressionType)">
            <summary>
                Determines whether operator is supported.
            </summary>
            <param name="type">Expression type.</param>
            <returns>True if supported otherwise false.</returns>
        </member>
        <member name="T:WindowsAzure.Table.Queryable.Expressions.Methods.TakeTranslator">
            <summary>
                LINQ Take method translator.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.Queryable.Expressions.Methods.SelectTranslator">
            <summary>
                LINQ Select method translator.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.Methods.SelectTranslator.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Constructor.
            </summary>
            <param name="nameChanges">Entity properties name changes.</param>
        </member>
        <member name="T:WindowsAzure.Table.Queryable.Expressions.Infrastructure.ExpressionTranslator">
            <summary>
                Expression translator.
                http://msdn.microsoft.com/en-us/library/windowsazure/dd894031.aspx
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.Infrastructure.ExpressionTranslator.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Constructor.
            </summary>
            <param name="nameChanges"></param>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.Infrastructure.ExpressionTranslator.AppendBinaryCall(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.ExpressionType)">
            <summary>
                Translates method call expression.
            </summary>
            <param name="node">Expression.</param>
            <param name="type">Expression type.</param>
            <returns>Whether expression has been completely translated.</returns>
        </member>
        <member name="T:WindowsAzure.Table.Queryable.Expressions.TranslationResult">
            <summary>
                TableQuery translation result.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.TranslationResult.AddFilter(System.String)">
            <summary>
                Adds a filter expression.
            </summary>
            <param name="filter">Filter expression.</param>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.TranslationResult.AddTop(System.Int32)">
            <summary>
                Adds a required count of query elements.
            </summary>
            <param name="top">Count of elements.</param>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.TranslationResult.AddColumn(System.String)">
            <summary>
                Adds a required column name.
            </summary>
            <param name="column">Column name.</param>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.TranslationResult.AddPostProcesing(System.Linq.Expressions.LambdaExpression)">
            <summary>
                Adds a post processing expression.
            </summary>
            <param name="lambda">Expression.</param>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.TranslationResult.MergeLambdasAndCompile(System.Collections.Generic.IList{System.Linq.Expressions.LambdaExpression})">
            <summary>
                Merges lambda expressions.
            </summary>
            <param name="expressions">List of lambda expressions.</param>
            <returns>Delegate.</returns>
        </member>
        <member name="P:WindowsAzure.Table.Queryable.Expressions.TranslationResult.TableQuery">
            <summary>
                Gets a TableQuery.
            </summary>
        </member>
        <member name="P:WindowsAzure.Table.Queryable.Expressions.TranslationResult.PostProcessing">
            <summary>
                Gets a post processing handler.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.Queryable.IAsyncQueryProvider">
            <summary>
                Defines methods to create and asynchronously execute queries that are described by an
                <see cref="T:System.Linq.IQueryable" /> object.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.IAsyncQueryProvider.ExecuteAsync(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <summary>
                Asynchronously executes the query represented by a specified expression tree.
            </summary>
            <returns>
                A Task containing the value that results from executing the specified query.
            </returns>
            <param name="expression">An expression tree that represents a LINQ query. </param>
            <param name="cancellationToken">The token to monitor for cancellation requests. </param>
        </member>
        <member name="T:WindowsAzure.Table.Queryable.TableQueryProvider`1">
            <summary>
                LINQ to Windows Azure Storage Table query provider.
                http://msdn.microsoft.com/en-us/library/windowsazure/dd894031.aspx
            </summary>
            <typeparam name="TEntity">Entity type.</typeparam>
        </member>
        <member name="T:WindowsAzure.Table.Queryable.Base.QueryProviderBase">
            <summary>
                Provides base functionality of the query provider interface.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Base.QueryProviderBase.Execute(System.Linq.Expressions.Expression)">
            <summary>
                Executes an expression processing.
            </summary>
            <param name="expression">Expression value.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.TableQueryProvider`1.#ctor(WindowsAzure.Table.Wrappers.ICloudTable,WindowsAzure.Table.EntityConverters.ITableEntityConverter{`0})">
            <summary>
                Constructor.
            </summary>
            <param name="cloudTable">Cloud table.</param>
            <param name="entityConverter"></param>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.TableQueryProvider`1.Execute(System.Linq.Expressions.Expression)">
            <summary>
                Executes expression query.
            </summary>
            <param name="expression">Expression.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.TableQueryProvider`1.ExecuteAsync(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
            <summary>
                Executes expression query asynchronously.
            </summary>
            <param name="expression"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.TableQueryProvider`1.GetProcessedResult(System.Collections.Generic.IEnumerable{Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity},WindowsAzure.Table.Queryable.Expressions.TranslationResult)">
            <summary>
                Executes post processing of retrieved entities.
            </summary>
            <param name="tableEntities">Table entities.</param>
            <param name="translation">translation result.</param>
            <returns>Collection of entities.</returns>
        </member>
        <member name="T:WindowsAzure.Table.Queryable.Base.Query`1">
            <summary>
                Provides a base implementation of the queryable.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Base.Query`1.#ctor(System.Linq.IQueryProvider,System.Linq.Expressions.Expression)">
            <summary>
                Creates a query.
            </summary>
            <param name="provider">Query provider.</param>
            <param name="expression">Expression.</param>
        </member>
        <member name="T:WindowsAzure.Table.Queryable.Expressions.QueryTranslator">
            <summary>
                Manages translation of the LINQ expressions.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.QueryTranslator.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
                Constructor.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.QueryTranslator.#ctor(System.Collections.Generic.IEnumerable{WindowsAzure.Table.Queryable.Expressions.Methods.IMethodTranslator})">
            <summary>
                Constructor.
            </summary>
            <param name="methodTranslators">LINQ Expression methods translators.</param>
        </member>
        <member name="M:WindowsAzure.Table.Queryable.Expressions.QueryTranslator.Translate(System.Linq.Expressions.Expression,WindowsAzure.Table.Queryable.Expressions.ITranslationResult)">
            <summary>
                Translates a LINQ expression into collection of query segments.
            </summary>
            <param name="expression">LINQ expression.</param>
            <param name="result">Translation result.</param>
            <returns>Collection of query segments.</returns>
        </member>
        <member name="T:WindowsAzure.Table.Attributes.RowKeyAttribute">
            <summary>
                Defines whether property should keep a row key value.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.RequestExecutor.TableRequestParallelExecutor`1">
            <summary>
                Handles query execution.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.TableRequestParallelExecutor`1.#ctor(WindowsAzure.Table.Wrappers.ICloudTable,WindowsAzure.Table.EntityConverters.ITableEntityConverter{`0},WindowsAzure.Table.RequestExecutor.ITableBatchPartitioner)">
            <summary>
                Constructor.
            </summary>
            <param name="cloudTable">Cloud table.</param>
            <param name="entityConverter">Entity converter.</param>
            <param name="partitioner">Batch partitioner.</param>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.TableRequestParallelExecutor`1.ExecuteBatches(System.Collections.Generic.IEnumerable{`0},System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation})">
            <summary>
                Executes batch operations.
            </summary>
            <param name="entities">List of entities.</param>
            <param name="operation">Table operation.</param>
            <returns>Result entities.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:WindowsAzure.Table.RequestExecutor.TableRequestParallelExecutor`1.GetEntities(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation)" -->
        <member name="M:WindowsAzure.Table.RequestExecutor.TableRequestParallelExecutor`1.ExecuteBatchesWithoutResult(System.Collections.Generic.IEnumerable{`0},System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation})">
            <summary>
                Executes batch operations without returning results.
            </summary>
            <param name="entities">List of entities.</param>
            <param name="operation">Table operation.</param>
            >
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.TableRequestParallelExecutor`1.ExecuteBatchesAsync(System.Collections.Generic.IEnumerable{`0},System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation},System.Threading.CancellationToken)">
            <summary>
                Executes batch operations asynchronously.
            </summary>
            <param name="entities">List of entities.</param>
            <param name="operation">Table operation.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Result entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.RequestExecutor.TableRequestParallelExecutor`1.ExecuteBatchesWithoutResultAsync(System.Collections.Generic.IEnumerable{`0},System.Func{Microsoft.WindowsAzure.Storage.Table.ITableEntity,Microsoft.WindowsAzure.Storage.Table.TableOperation},System.Threading.CancellationToken)">
            <summary>
                Executes batch operations without returning results asynchronously.
            </summary>
            <param name="entities">List of entities.</param>
            <param name="operation">Table operation.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="T:WindowsAzure.Table.TableSet`1">
            <summary>
                Windows Azure Table entity set.
            </summary>
            <typeparam name="TEntity">Entity type.</typeparam>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.#ctor(Microsoft.WindowsAzure.Storage.Table.CloudTableClient)">
            <summary>
                Constructor.
            </summary>
            <param name="cloudTableClient">Cloud table client.</param>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.#ctor(Microsoft.WindowsAzure.Storage.Table.CloudTableClient,System.String)">
            <summary>
                Constructor.
            </summary>
            <param name="cloudTableClient">Cloud table client.</param>
            <param name="tableName">Table name.</param>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.Add(`0)">
            <summary>
                Inserts a new entity.
            </summary>
            <param name="entity">Entity.</param>
            <returns>Inserted entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Inserts a new entity asynchronously.
            </summary>
            <param name="entity">Entity.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Inserted entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Inserts a new entities.
            </summary>
            <param name="entities">Entities collection.</param>
            <returns>Inserted entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.AddAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                Inserts a new entities asynchronously.
            </summary>
            <param name="entities">Entities collection.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Inserted entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.AddOrUpdate(`0)">
            <summary>
                Inserts or updates an entity.
            </summary>
            <param name="entity">Entity.</param>
            <returns>Inserted entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.AddOrUpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Inserts or updates an entity asynchronously.
            </summary>
            <param name="entity">Entity.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Inserted entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.AddOrUpdate(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Inserts or updates an entities.
            </summary>
            <param name="entities">Entities collection.</param>
            <returns>Inserted entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.AddOrUpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                Inserts or updates an entities asynchronously.
            </summary>
            <param name="entities">Entities collection.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Inserted entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.AddOrMerge(`0)">
            <summary>
                Inserts or merges an entity.
            </summary>
            <param name="entity">Entity.</param>
            <returns>Inserted entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.AddOrMergeAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Inserts or merges an entity asynchronously.
            </summary>
            <param name="entity">Entity.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Inserted entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.AddOrMerge(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Inserts or merges an entities.
            </summary>
            <param name="entities">Entities collection.</param>
            <returns>Inserted entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.AddOrMergeAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                Inserts or merges an entities asynchronously.
            </summary>
            <param name="entities">Entities collection.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Inserted entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.Update(`0)">
            <summary>
                Updates an entity.
            </summary>
            <param name="entity">Entity.</param>
            <returns>Updated entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Updates an entity asynchronously.
            </summary>
            <param name="entity">Entity.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Updated entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Updates an entities.
            </summary>
            <param name="entities">Entities collection.</param>
            <returns>Updated entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                Updates an entities asynchronously.
            </summary>
            <param name="entities">Entities collection.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Updated entities.</returns>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.Remove(`0)">
            <summary>
                Removes an entity.
            </summary>
            <param name="entity">Entity.</param>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.RemoveAsync(`0,System.Threading.CancellationToken)">
            <summary>
                Removes an entity asynchronously.
            </summary>
            <param name="entity">Entity.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Removes an entities.
            </summary>
            <param name="entities">Entities collection.</param>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.RemoveAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
                Removes an entities asynchronously.
            </summary>
            <param name="entities">Entities collection.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.CreateIfNotExists">
            <summary>
                Creates the table if it does not already exist.
            </summary>
            <returns>
                <c>true</c> if table was created; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.TableSet`1.CreateIfNotExistsAsync(System.Threading.CancellationToken)">
            <summary>
                Initiates an asynchronous operation to create a table if it does not already exist.
            </summary>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for a
                task to complete.
            </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task`1" /> object of type <c>bool</c> that represents the asynchronous
                operation.
            </returns>
        </member>
        <member name="P:WindowsAzure.Table.TableSet`1.ExecutionMode">
            <summary>
                Gets or sets a value indicating request execution mode.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.EntityConverters.TableEntityConverter`1">
            <summary>
                Handles an entities conversions.
            </summary>
            <typeparam name="T">Entity type.</typeparam>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TableEntityConverter`1.#ctor">
            <summary>
                Constructor.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TableEntityConverter`1.GetEntity(`0)">
            <summary>
                Creates an ITableEntity by TEntity.
            </summary>
            <param name="entity">Entity.</param>
            <returns>Table entity.</returns>
        </member>
        <member name="M:WindowsAzure.Table.EntityConverters.TableEntityConverter`1.GetEntity(Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity)">
            <summary>
                Creates a TEntity by DynamicTableEntity.
            </summary>
            <param name="tableEntity">Table entity.</param>
            <returns>Entity.</returns>
        </member>
        <member name="P:WindowsAzure.Table.EntityConverters.TableEntityConverter`1.NameChanges">
            <summary>
                Gets an entity property name maping connection.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.Attributes.TimestampAttribute">
            <summary>
                Defines whether property should keep a timestamp value.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.Wrappers.CloudTableWrapper">
            <summary>
                Wrapper around <see cref="T:Microsoft.WindowsAzure.Storage.Table.CloudTable"/>.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.Wrappers.ICloudTable">
            <summary>
                Public interface of <see cref="T:Microsoft.WindowsAzure.Storage.Table.CloudTable"/>.
            </summary>
        </member>
        <member name="M:WindowsAzure.Table.Wrappers.ICloudTable.ExecuteQuery(WindowsAzure.Table.Wrappers.ITableQuery)">
            <summary>
                Executes a query on a table.
            </summary>
            <param name="tableQuery">
                A <see cref="T:WindowsAzure.Table.Wrappers.ITableQuery"/> representing the query to execute.
            </param>
            <returns>
                An enumerable collection of <see cref="T:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity"/> objects, representing table entities returned by the query.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Wrappers.ICloudTable.ExecuteQueryAsync(WindowsAzure.Table.Wrappers.ITableQuery,System.Threading.CancellationToken)">
            <summary>
                Executes a query on a table asynchronously.
            </summary>
            <param name="tableQuery">Table query.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
                An enumerable collection of <see cref="T:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity" /> objects, representing table entities returned by the query.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Wrappers.ICloudTable.Execute(Microsoft.WindowsAzure.Storage.Table.TableOperation)">
            <summary>
                Executes the operation on a table.
            </summary>
            <param name="operation">
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableOperation" /> object that represents the operation to perform.
            </param>
            <returns>
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableResult" /> containing the result of executing the operation on the table.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Wrappers.ICloudTable.ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation,System.Threading.CancellationToken)">
            <summary>
                Executes table operation asynchronously.
            </summary>
            <param name="operation">
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableOperation" /> object that represents the operation to perform.
            </param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableResult" /> containing the result of executing the operation on the table.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Wrappers.ICloudTable.ExecuteBatch(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation)">
            <summary>
                Executes a batch operation on a table as an atomic operation.
            </summary>
            <param name="batch">
                The <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" /> object representing the operations to execute on the table.
            </param>
            <returns>
                An enumerable collection of <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableResult" /> objects that contains the results, in order, of each operation in the
                <see
                    cref="T:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" />
                on the table.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Wrappers.ICloudTable.ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,System.Threading.CancellationToken)">
            <summary>
                Executes a batch of operations on a table asynchronously.
            </summary>
            <param name="tableBatchOperation">
                The <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" /> object representing the operations to execute on the table.
            </param>
            <param name="cancellationToken">Cancalltion token.</param>
            <returns>
                An enumerable collection of <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableResult" /> objects that contains the results, in order, of each operation in the
                <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" />
                on the table.
            </returns>
        </member>
        <member name="P:WindowsAzure.Table.Wrappers.ICloudTable.Name">
            <summary>
                Gets the table name.
            </summary>
            <value> The table name. </value>
        </member>
        <member name="M:WindowsAzure.Table.Wrappers.CloudTableWrapper.#ctor(Microsoft.WindowsAzure.Storage.Table.CloudTable)">
            <summary>
                Constructor.
            </summary>
            <param name="cloudTable">Cloud table.</param>
        </member>
        <member name="M:WindowsAzure.Table.Wrappers.CloudTableWrapper.ExecuteQuery(WindowsAzure.Table.Wrappers.ITableQuery)">
            <summary>
                Executes a query on a table.
            </summary>
            <param name="tableQuery">
                A <see cref="T:WindowsAzure.Table.Wrappers.ITableQuery"/> representing the query to execute.
            </param>
            <returns>
                An enumerable collection of <see cref="T:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity"/> objects, representing table entities returned by the query.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Wrappers.CloudTableWrapper.ExecuteQueryAsync(WindowsAzure.Table.Wrappers.ITableQuery,System.Threading.CancellationToken)">
            <summary>
                Executes a query on a table asynchronously.
            </summary>
            <param name="tableQuery">Table query.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
                An enumerable collection of <see cref="T:Microsoft.WindowsAzure.Storage.Table.DynamicTableEntity" /> objects, representing table entities returned by the query.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Wrappers.CloudTableWrapper.Execute(Microsoft.WindowsAzure.Storage.Table.TableOperation)">
            <summary>
                Executes the operation on a table.
            </summary>
            <param name="operation">
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableOperation" /> object that represents the operation to perform.
            </param>
            <returns>
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableResult" /> containing the result of executing the operation on the table.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Wrappers.CloudTableWrapper.ExecuteAsync(Microsoft.WindowsAzure.Storage.Table.TableOperation,System.Threading.CancellationToken)">
            <summary>
                Executes table operation asynchronously.
            </summary>
            <param name="operation">
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableOperation" /> object that represents the operation to perform.
            </param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
                A <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableResult" /> containing the result of executing the operation on the table.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Wrappers.CloudTableWrapper.ExecuteBatch(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation)">
            <summary>
                Executes a batch operation on a table as an atomic operation.
            </summary>
            <param name="batch">
                The <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" /> object representing the operations to execute on the table.
            </param>
            <returns>
                An enumerable collection of <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableResult" /> objects that contains the results, in order, of each operation in the
                <see
                    cref="T:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" />
                on the table.
            </returns>
        </member>
        <member name="M:WindowsAzure.Table.Wrappers.CloudTableWrapper.ExecuteBatchAsync(Microsoft.WindowsAzure.Storage.Table.TableBatchOperation,System.Threading.CancellationToken)">
            <summary>
                Executes a batch of operations on a table asynchronously.
            </summary>
            <param name="tableBatchOperation">
                The <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" /> object representing the operations to execute on the table.
            </param>
            <param name="cancellationToken">Cancalltion token.</param>
            <returns>
                An enumerable collection of <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableResult" /> objects that contains the results, in order, of each operation in the
                <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" />
                on the table.
            </returns>
        </member>
        <member name="P:WindowsAzure.Table.Wrappers.CloudTableWrapper.Name">
            <summary>
                Gets the table name.
            </summary>
            <value> The table name. </value>
        </member>
        <member name="T:WindowsAzure.Table.Wrappers.TableQueryWrapper">
            <summary>
                Wrapper around <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableQuery"/>.
            </summary>
        </member>
        <member name="T:WindowsAzure.Table.Wrappers.ITableQuery">
            <summary>
                <see cref="T:Microsoft.WindowsAzure.Storage.Table.TableQuery"/> public interface.
            </summary>
        </member>
        <member name="P:WindowsAzure.Table.Wrappers.ITableQuery.TakeCount">
            <summary>
                Gets or sets the number of entities the table query will return.
            </summary>
            <value>
                The maximum number of entities for the table query to return.
            </value>
        </member>
        <member name="P:WindowsAzure.Table.Wrappers.ITableQuery.FilterString">
            <summary>
                Gets or sets the filter expression to use in the table query.
            </summary>
            <value>
                A string containing the filter expression to use in the query.
            </value>
        </member>
        <member name="P:WindowsAzure.Table.Wrappers.ITableQuery.SelectColumns">
            <summary>
                Gets or sets the property names of the table entity properties to return when the table query is executed.
            </summary>
            <value>
                A list of strings containing the property names of the table entity properties to return when the query is executed.
            </value>
        </member>
        <member name="M:WindowsAzure.Table.Wrappers.TableQueryWrapper.#ctor(Microsoft.WindowsAzure.Storage.Table.TableQuery)">
            <summary>
                Constructor.
            </summary>
            <param name="tableQuery">Table query.</param>
        </member>
        <member name="P:WindowsAzure.Table.Wrappers.TableQueryWrapper.TakeCount">
            <summary>
                Gets or sets the number of entities the table query will return.
            </summary>
            <value>
                The maximum number of entities for the table query to return.
            </value>
        </member>
        <member name="P:WindowsAzure.Table.Wrappers.TableQueryWrapper.FilterString">
            <summary>
                Gets or sets the filter expression to use in the table query.
            </summary>
            <value>
                A string containing the filter expression to use in the query.
            </value>
        </member>
        <member name="P:WindowsAzure.Table.Wrappers.TableQueryWrapper.SelectColumns">
            <summary>
                Gets or sets the property names of the table entity properties to return when the table query is executed.
            </summary>
            <value>
                A list of strings containing the property names of the table entity properties to return when the query is executed.
            </value>
        </member>
    </members>
</doc>
